swagger: '2.0'

info:
  version: 1.0.0
  title: DistinctAI - User
  description: |
    **Errors**

    Uses conventional HTTP response codes to indicate success or failure. In general, codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error (e.g. required parameters, failed request etc.). Codes int he `5xx` range indicate a server error occurred.
  
  contact:
    name: DistinctAI
    email: developers@distinct.ai
  
  license:
    name: Proprietary

host: dev-api.distinct.ai
basePath: /users
schemes:
  - http
  - https

securityDefinitions:
  authToken:
    type: apiKey
    name: x-auth-token
    in: header

tags:
  - name: user
    description: User related endpoints
  - name: public
    description: Publicly available endpoints

paths:
  /auth/signup:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Register new user
      operationId: authSignup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: Signup credentials
          schema:
            $ref: '#/definitions/SignupRequestDto'
      responses:
        200:
          description: Signup success
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

  /auth/signin:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Authenticate user
      operationId: authSignin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: Signin credentials
          schema:
            $ref: '#/definitions/SigninRequestDto'
      responses:
        200:
          description: Signin successful
          schema:
            $ref: '#/definitions/TokenDto'

  /auth/email/confirm:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Confirm signup email address
      description: |
        Auth token to be gotten from email sent to user to confirm their email address
      operationId: authSignupEmailConfirm
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Operation successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

  /auth/password/reset:
    post:
      tags:
        - user
      security: []
      summary: Reset user password
      operationId: authResetPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: Login credentials
          schema:
            $ref: '#/definitions/PasswordResetDto'
      responses:
        200:
          description: Operation successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

  /auth/password/change:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Change user password
      description: |
        Auth token to be gotten from email sent to the user via the /reset endpoint
      operationId: authChangePassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: Login credentials
          schema:
            $ref: '#/definitions/PasswordChangeDto'
      responses:
        200:
          description: Operation successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

  /company:
    get:
      tags:
        - user
      security:
        - authToken: []
      summary: Get company information
      operationId: getUserCompany
      produces:
        - application/json
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CompanyDto'

    patch:
      tags:
        - user
      security:
        - authToken: []
      summary: Update company info
      operationId: updateCompanyInfo
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CompanyDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CompanyDto'

  /me:
    get:
      tags:
        - user
      security:
        - authToken: []
      summary: Get authenticated user
      operationId: getActiveUser
      produces:
        - application/json
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/UserDto'

    patch:
      tags:
        - user
      security:
        - authToken: []
      summary: Update user info
      operationId: updateUserInfo
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/UserDto'

  /me/password:
    post:
      tags:
        - user
      security:
        - authToken: []
      operationId: userChangePassword
      summary: Change user password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserPasswordChangeDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

  /me/candidate:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Add candidate information
      operationId: addCandidateInfo
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CandidateDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CandidateDto'

  /teams:
    get:
      tags:
        - user
      security:
        - authToken: []
      summary: Get all team members
      operationId: getTeamMembers
      produces:
        - application/json
      responses:
        200:
          description: Request success
          schema:
            $ref: '#/definitions/TeamMemberListDto'

    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Adds a team member
      operationId: addTeamMember
      parameters:
        - in: body
          name: body
          required: true
          description: Request body
          schema:
            $ref: '#/definitions/TeamMemberDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/TeamMemberDto'

  /teams/{id}:
    parameters:
      - in: path
        name: id
        description: Member Id
        required: true
        type: string
        format: uuid

    delete:
      tags:
        - user
      security:
        - authToken: []
      summary: Remove a team member
      operationId: removeTeamMember
      responses:
        200:
          description: Operation successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

    patch:
      tags:
        - user
      security:
        - authToken: []
      summary: Update team member
      operationId: updateTeamMember
      parameters:
        - in: body
          name: body
          required: true
          description: Request body
          schema:
            $ref: '#/definitions/TeamMemberDto'
      responses:
        200:
          description: Update success
          schema:
            $ref: '#/definitions/TeamMemberDto'

  /teams/invite/respond:
    post:
      tags:
        - user
      security:
        - authToken: []
      summary: Respond to team invite
      operationId: respondTeamInvite
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TeamInviteResponseDto'
      responses:
        200:
          description: Request successful
          schema:
            $ref: '_common.yaml#/definitions/StatusDto'

definitions:
  TokenDto:
    type: object
    required:
      - token
      - expiresIn
    properties:
      token:
        type: string
        example: JWT_TOKEN
      expiresIn:
        type: number
        example: 3600

  UserTypes:
    type: string
    enum:
      - CANDIDATE
      - COMPANY

  SignupRequestDto:
    type: object
    required:
      - type
      - firstName
      - lastName
      - email
      - password
    properties:
      type:
        $ref: '#/definitions/UserTypes'
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phoneNumber:
        type: string
      password:
        type: string
    
  SigninRequestDto:
    type: object
    required:
      - type
      - email
      - password
    properties: 
      type:
        $ref: '#/definitions/UserTypes'
      email:
        type: string
      password:
        type: string

  UserDto:
    type: object
    required:
      - firstName
      - lastName
      - middleName
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      type:
        allOf:
          - $ref: '#/definitions/UserTypes'
          - readOnly: true
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      email:
        type: string
        example: test@example.com
        readOnly: true
      phoneNumber:
        type: string
      photo:
        type: string
      createdAt:
        $ref: '_common.yaml#/definitions/Timestamp'
      updatedAt:
        $ref: '_common.yaml#/definitions/Timestamp'

  CompanyDto:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      logo:
        type: string
      name:
        type: string
      bio:
        type: string
      size:
        type: string
      industry:
        type: string
      locations:
        type: array
        items: 
          type: string
      socials:
        type: object
        properties:
          website:
            type: string
            format: url
          linkedIn:
            type: string
          instagram:
            type: string
          twitter:
            type: string
          facebook:
            type: string
          glassdoor:
            type: string
      createdAt:
        $ref: '_common.yaml#/definitions/Timestamp'
      updatedAt:
        $ref: '_common.yaml#/definitions/Timestamp'

  CandidateDto:
    type: object
    properties:
      salary:
        type: object
        properties:
          current:
            $ref: '_common.yaml#/definitions/AmountFormat'
          desired:
            $ref: '_common.yaml#/definitions/AmountFormat'
      jobLocation:
        type: string
        enum:
          - OFFICE
          - REMOTE
          - HYBRID
      dob:
        type: string
        format: date-time

  PasswordResetDto:
    type: object
    properties: 
      email:
        type: string
        format: email

  PasswordChangeDto:
    type: object
    properties:
      password:
        type: string

  UserPasswordChangeDto:
    type: object
    required:
      - currentPassword
      - newPassword
    properties:
      currentPassword:
        type: string
        description: Current user password
      newPassword:
        type: string
        description: New password to replace current

  TeamMemberDto:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      status:
        type: string
        readOnly: true
        enum:
          - PENDING
          - ACCEPTED
          - REJECTED
          - EXPIRED
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phoneNumber:
        type: string
      permissions:
        type: array
        items:
          type: string
      createdAt:
        $ref: '_common.yaml#/definitions/Timestamp'
      updatedAt:
        $ref: '_common.yaml#/definitions/Timestamp'

  TeamMemberListDto:
    type: object
    properties: 
      members:
        type: array
        items:
          $ref: '#/definitions/TeamMemberDto'

  TeamInviteResponseDto:
    type: object
    properties:
      response:
        type: string
        enum:
          - ACCEPT
          - REJECT
      password:
        type: string
